# main.py
import os
import shutil
from pathlib import Path
from fastapi import FastAPI, File, UploadFile, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from langchain_gigachat import GigaChat
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain.document_loaders import TextLoader, PyPDFLoader, Docx2txtLoader
from dotenv import load_dotenv
from agent_orchestrator import route_query


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI()

# –ü–∞–ø–∫–∏
UPLOAD_DIR = Path("uploads")
UPLOAD_DIR.mkdir(exist_ok=True)
STATIC_DIR = Path("static")
STATIC_DIR.mkdir(exist_ok=True)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏–∫—É
app.mount("/static", StaticFiles(directory="static"), name="static")

document_text = ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
llm = GigaChat(
    credentials=os.getenv("API_KEY"), 
    model="GigaChat",
    verify_ssl_certs=False,
)

@app.get("/", response_class=HTMLResponse)
async def get_chat():
    with open("static/index.html", encoding="utf-8") as f:
        return HTMLResponse(f.read())

@app.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    global document_text
    if not file.filename:
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")

    ext = file.filename.split(".")[-1].lower()
    if ext not in ["txt", "pdf", "docx"]:
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt, .pdf, .docx")

    file_path = UPLOAD_DIR / file.filename
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    try:
        if ext == "txt":
            loader = TextLoader(file_path, encoding="utf-8")
        elif ext == "pdf":
            loader = PyPDFLoader(str(file_path))
        elif ext == "docx":
            loader = Docx2txtLoader(str(file_path))
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")

        docs = loader.load()
        document_text = "\n\n".join([doc.page_content for doc in docs])

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (GigaChat –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ~8K —Ç–æ–∫–µ–Ω–æ–≤)
        if len(document_text) > 8000:
            document_text = document_text[:8000] + "... (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è —É–∫–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç)"

        return {"message": f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{file.filename}' –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É."}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")


# –í —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ /chat
@app.post("/chat")
async def chat(request: Request):
    global document_text
    body = await request.json()
    user_message = body.get("message", "").strip()

    if not document_text:
        return {"response": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç."}
    if not user_message:
        return {"response": "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."}

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É!
        final_response = route_query(document_text, user_message)
        return final_response
    except Exception as e:
        return {"response": f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {str(e)}"}