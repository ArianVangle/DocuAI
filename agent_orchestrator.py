# agent_orchestrator.py
from langchain_gigachat import GigaChat
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
import os
import json

# –ò–º–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–æ–≤
from agents.document_analyst import analyze_document
from agents.marketing_expert import generate_ab_tests
from agents.technical_reviewer import answer_technical_question
from agents.summarizer import summarize_document

# –û–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è LLM-–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
AGENT_DESCRIPTIONS = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:
1. **summarizer** ‚Äî –¥–∞—ë—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —É—á—ë—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
2. **marketing_expert** ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç A/B-—Ç–µ—Å—Ç—ã –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
3. **technical_reviewer** ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É.
4. **document_analyst** ‚Äî –ø—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
"""

def route_with_llm(user_query: str) -> dict:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é GigaChat –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–º—è + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ.
    """
    llm = GigaChat(
        credentials=os.getenv("API_KEY"),
        model="GigaChat",
        verify_ssl_certs=False
    )
    
    prompt = ChatPromptTemplate.from_messages([
        ("system", "–¢—ã ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. "
                   "–í—ã–±–µ—Ä–∏ –û–î–ò–ù –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—Ä–∞—Ç–∫–æ –æ–±–æ—Å–Ω—É–π –≤—ã–±–æ—Ä (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ).\n\n"
                   f"{AGENT_DESCRIPTIONS}\n"
                   "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{{\"agent\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ_–∞–≥–µ–Ω—Ç–∞\", \"reasoning\": \"–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\"}}"),
        ("human", "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}")
    ])
    
    chain = prompt | llm | StrOutputParser()
    try:
        raw_response = chain.invoke({"query": user_query})
        data = json.loads(raw_response)
        agent_name = data.get("agent", "document_analyst")
        reasoning = data.get("reasoning", "–ê–≥–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞
        valid_agents = {"summarizer", "marketing_expert", "technical_reviewer", "document_analyst"}
        if agent_name not in valid_agents:
            agent_name = "document_analyst"
            reasoning = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            
        return {"agent_name": agent_name, "reasoning": reasoning}
        
    except Exception as e:
        return {
            "agent_name": "document_analyst",
            "reasoning": f"–û—à–∏–±–∫–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. ({str(e)})"
        }

def route_query(document_text: str, user_query: str) -> dict:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"steps": [...], "final_answer": "..."}
    """
    steps = []
    
    # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    steps.append({
        "agent": "üß†",
        "message": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞..."
    })
    
    # –®–∞–≥ 2: –í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ LLM
    routing_result = route_with_llm(user_query)
    steps.append({
        "agent": "üß†",
        "message": f"–í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: {routing_result['agent_name']} ‚Üí {routing_result['reasoning']}"
    })
    
    # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
    agent_name = routing_result["agent_name"]
    steps.append({
        "agent": f"üßë‚Äçüíº {agent_name}",
        "message": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
    })
    
    try:
        if agent_name == "summarizer":
            final_answer = summarize_document(document_text, user_query)
            
        elif agent_name == "marketing_expert":
            final_answer = generate_ab_tests(document_text, user_query)
            
        elif agent_name == "technical_reviewer":
            final_answer = answer_technical_question(document_text, user_query)
            
        elif agent_name == "document_analyst":
            analysis = analyze_document(document_text, user_query)
            summary = summarize_document(document_text, user_query)
            final_answer = f"üîç **–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞**:\n{analysis}\n\nüìù **–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ**:\n{summary}"
            
        else:
            final_answer = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Å–∏—Å—Ç–µ–º—ã."
            
    except Exception as e:
        final_answer = f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {str(e)}"
        steps.append({
            "agent": "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞",
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
        })
    
    return {
        "steps": steps,
        "final_answer": final_answer
    }